{
  "address": "0xb946F88aA38Ec4346516d89ec18fC14b71899bFD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "creatorFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "treasuryFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryWallet",
          "type": "address"
        }
      ],
      "name": "FeeSettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newMaxParticipants",
          "type": "uint16"
        }
      ],
      "name": "MaxParticipantsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "PayoutOrderAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tandaAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "participantCount",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "TandaCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSubscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newGasLane",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newCallbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newRequestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newNativePayment",
          "type": "bool"
        }
      ],
      "name": "VRFConfigUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeTandas",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_participantCount",
          "type": "uint16"
        },
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "createTanda",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveTandaIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeSettings",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxParticipants",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "getTandaAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVRFConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "isTandaActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxParticipants",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTandaId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "requestRandomnessForTanda",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tandaIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_creatorFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_treasuryFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "updateFeeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_maxParticipants",
          "type": "uint16"
        }
      ],
      "name": "updateMaxParticipants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_nativePayment",
          "type": "bool"
        }
      ],
      "name": "updateVRFConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestIdToTandaId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x071f0eadbfe3d49994a3194175d3c66bde848903a9455d1f9eac6b3bab10c99b",
  "receipt": {
    "to": null,
    "from": "0xFb9E902E277432c1897B20da9F2D137cd1E13218",
    "contractAddress": "0xb946F88aA38Ec4346516d89ec18fC14b71899bFD",
    "transactionIndex": 11,
    "gasUsed": "4011225",
    "logsBloom": "0x
    "blockHash": "0xfaf3b7c74f4d45c48b51a6c1b06beaaf9f321db63755a7699a4e6e219b91d65a",
    "transactionHash": "0x071f0eadbfe3d49994a3194175d3c66bde848903a9455d1f9eac6b3bab10c99b",
    "logs": [],
    "blockNumber": 27898373,
    "cumulativeGasUsed": "8866441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C210eF41CD1a72de73bF76eC39637bB0d3d7BEE",
    "17652650031881938556899546254523775603114927968482728430038901064991564696628",
    "0x9e1344a1247c8a1785d0a4681a27152bffdb43666ae5bf7d14d24a5efd44bf71",
    "2500000",
    "0x8D352ac15ae5355adae6a6545B9E53a00C99E99f",
    "0xCCFF7C38BC72326142D8cFE36Ff137675F933477"
  ],
  "numDeployments": 3,
  "solcInputHash": "00e1d07d7ac2beec5de894d0245e1df3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"creatorFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"}],\"name\":\"FeeSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxParticipants\",\"type\":\"uint16\"}],\"name\":\"MaxParticipantsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"PayoutOrderAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tandaAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"participantCount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"TandaCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSubscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newGasLane\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newCallbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newNativePayment\",\"type\":\"bool\"}],\"name\":\"VRFConfigUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTandas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_participantCount\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"createTanda\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveTandaIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSettings\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxParticipants\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"getTandaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRFConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"isTandaActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxParticipants\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTandaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"requestRandomnessForTanda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tandaIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_creatorFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"updateFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxParticipants\",\"type\":\"uint16\"}],\"name\":\"updateMaxParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_nativePayment\",\"type\":\"bool\"}],\"name\":\"updateVRFConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestIdToTandaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createTanda(uint256,uint256,uint16,address[])\":{\"params\":{\"_contributionAmount\":\"USDC amount each participant must contribute\",\"_participantCount\":\"Number of participants needed\",\"_payoutInterval\":\"Time between payouts in seconds\",\"_whitelist\":\"Array of whitelisted participant addresses\"},\"returns\":{\"_0\":\"tandaId ID of the newly created Tanda\"}},\"requestRandomnessForTanda(uint256)\":{\"details\":\"Only callable by Tanda contracts\"},\"updateFeeSettings(uint16,uint16,address)\":{\"params\":{\"_creatorFee\":\"New creator fee in basis points (max 400 = 4%)\",\"_treasuryFee\":\"New treasury fee in basis points (max 400 = 4%)\",\"_treasuryWallet\":\"New treasury wallet address\"}},\"updateMaxParticipants(uint16)\":{\"params\":{\"_maxParticipants\":\"New maximum participants (must be >= 2)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"createTanda(uint256,uint256,uint16,address[])\":{\"notice\":\"Create a new Tanda\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestRandomnessForTanda(uint256)\":{\"notice\":\"Request randomness for payout order assignment\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"},\"updateFeeSettings(uint16,uint16,address)\":{\"notice\":\"Update fee settings\"},\"updateMaxParticipants(uint16)\":{\"notice\":\"Update maximum number of participants per tanda\"},\"updateVRFConfig(uint256,bytes32,uint32,uint16,uint32,bool)\":{\"notice\":\"Update VRF configuration parameters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TandaManager.sol\":\"TandaManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Tanda.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface ITandaManager {\\r\\n    function requestRandomnessForTanda(uint256 tandaId) external;\\r\\n    function getUsdcAddress() external view returns (address);\\r\\n    function isTandaActive(uint256 tandaId) external view returns (bool);\\r\\n    function getMaxParticipants() external view returns (uint16);\\r\\n    function getFeeSettings()\\r\\n        external\\r\\n        view\\r\\n        returns (uint16 creatorFee, uint16 treasuryFee, address treasuryWallet);\\r\\n}\\r\\n\\r\\ncontract Tanda is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    enum TandaState {\\r\\n        OPEN,\\r\\n        ACTIVE,\\r\\n        COMPLETED\\r\\n    }\\r\\n\\r\\n    struct Participant {\\r\\n        address payable addr;\\r\\n        bool hasPaid;\\r\\n        uint256 paidUntilCycle;\\r\\n        bool isActive;\\r\\n        uint256 payoutOrder;\\r\\n        uint256 joinTimestamp;\\r\\n    }\\r\\n\\r\\n    uint256 public immutable tandaId;\\r\\n    uint256 public immutable contributionAmount;\\r\\n    uint256 public immutable payoutInterval; // in seconds\\r\\n    uint16 public immutable participantCount;\\r\\n    ITandaManager public immutable manager;\\r\\n    IERC20 public immutable usdcToken;\\r\\n    address public immutable creator;\\r\\n\\r\\n    TandaState public state;\\r\\n    uint256 public startTimestamp;\\r\\n    uint256 public currentCycle;\\r\\n    uint256 public totalFunds;\\r\\n    Participant[] public participants;\\r\\n    mapping(address => uint256) public addressToParticipantIndex;\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    bool public payoutOrderAssigned;\\r\\n    uint256[] public payoutOrder;\\r\\n\\r\\n    event ParticipantJoined(address indexed participant, uint256 timestamp);\\r\\n    event PaymentMade(\\r\\n        address indexed participant,\\r\\n        uint256 cyclesPaid,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event PayoutSent(\\r\\n        address indexed recipient,\\r\\n        uint256 amount,\\r\\n        uint256 cycle,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event ParticipantRemoved(\\r\\n        address indexed participant,\\r\\n        uint256 cycle,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event TandaStarted(uint256 startTimestamp, uint256 initialCycle);\\r\\n    event PayoutOrderAssigned(uint256[] order, uint256 timestamp);\\r\\n    event TandaCompleted(uint256 completionTimestamp);\\r\\n    event FeesDistributed(\\r\\n        uint256 creatorAmount,\\r\\n        uint256 treasuryAmount,\\r\\n        uint256 cycle\\r\\n    );\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == address(manager), \\\"Caller is not manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        require(msg.sender == creator, \\\"Caller is not creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyParticipant() {\\r\\n        require(isParticipant(msg.sender), \\\"Caller is not participant\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyActiveTanda() {\\r\\n        require(state == TandaState.ACTIVE, \\\"Tanda is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOpenTanda() {\\r\\n        require(state == TandaState.OPEN, \\\"Tanda is not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCompletedTanda() {\\r\\n        require(state == TandaState.COMPLETED, \\\"Tanda is not completed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 _tandaId,\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _payoutInterval,\\r\\n        uint16 _participantCount,\\r\\n        address _manager,\\r\\n        address _creator,\\r\\n        address[] memory _whitelist\\r\\n    ) {\\r\\n        require(_contributionAmount > 0, \\\"Contribution amount must be > 0\\\");\\r\\n        require(_payoutInterval > 0, \\\"Payout interval must be > 0\\\");\\r\\n        require(_participantCount >= 2, \\\"Minimum 2 participants required\\\");\\r\\n        require(_manager != address(0), \\\"Invalid manager address\\\");\\r\\n        require(_creator != address(0), \\\"Invalid creator address\\\");\\r\\n        require(\\r\\n            _whitelist.length == _participantCount,\\r\\n            \\\"Whitelist length must match participant count\\\"\\r\\n        );\\r\\n\\r\\n        tandaId = _tandaId;\\r\\n        contributionAmount = _contributionAmount;\\r\\n        payoutInterval = _payoutInterval;\\r\\n        participantCount = _participantCount;\\r\\n        manager = ITandaManager(_manager);\\r\\n        usdcToken = IERC20(manager.getUsdcAddress());\\r\\n        state = TandaState.OPEN;\\r\\n        creator = _creator;\\r\\n\\r\\n        // Initialize whitelist\\r\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\r\\n            require(_whitelist[i] != address(0), \\\"Invalid whitelist address\\\");\\r\\n            whitelist[_whitelist[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Join the Tanda by contributing USDC\\r\\n     * @dev Transfers USDC from participant to contract\\r\\n     */\\r\\n    function join() external onlyOpenTanda {\\r\\n        require(!isParticipant(msg.sender), \\\"Already joined this tanda\\\");\\r\\n        require(whitelist[msg.sender], \\\"Address not whitelisted\\\");\\r\\n\\r\\n        // Transfer USDC from participant to contract\\r\\n        usdcToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            contributionAmount\\r\\n        );\\r\\n\\r\\n        participants.push(\\r\\n            Participant({\\r\\n                addr: payable(msg.sender),\\r\\n                hasPaid: true,\\r\\n                paidUntilCycle: 1,\\r\\n                isActive: true,\\r\\n                payoutOrder: 0,\\r\\n                joinTimestamp: block.timestamp\\r\\n            })\\r\\n        );\\r\\n        addressToParticipantIndex[msg.sender] = participants.length;\\r\\n        totalFunds += contributionAmount;\\r\\n\\r\\n        emit ParticipantJoined(msg.sender, block.timestamp);\\r\\n\\r\\n        if (participants.length == participantCount) {\\r\\n            _startTanda();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Make payment for future cycles\\r\\n     * @param cyclesToPay Number of cycles to pay for\\r\\n     */\\r\\n    function makePayment(\\r\\n        uint256 cyclesToPay\\r\\n    ) external onlyParticipant onlyActiveTanda {\\r\\n        require(cyclesToPay > 0, \\\"Must pay for at least 1 cycle\\\");\\r\\n\\r\\n        uint256 participantIndex = addressToParticipantIndex[msg.sender] - 1;\\r\\n        Participant storage participant = participants[participantIndex];\\r\\n\\r\\n        require(participant.isActive, \\\"Participant is inactive\\\");\\r\\n\\r\\n        uint256 maxCyclesCanPay = participantCount - participant.paidUntilCycle;\\r\\n        require(\\r\\n            cyclesToPay <= maxCyclesCanPay,\\r\\n            \\\"Cannot pay beyond total cycles\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalPayment = contributionAmount * cyclesToPay;\\r\\n        usdcToken.safeTransferFrom(msg.sender, address(this), totalPayment);\\r\\n\\r\\n        participant.paidUntilCycle += cyclesToPay;\\r\\n        participant.hasPaid = true;\\r\\n        totalFunds += totalPayment;\\r\\n\\r\\n        emit PaymentMade(\\r\\n            msg.sender,\\r\\n            cyclesToPay,\\r\\n            totalPayment,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Trigger payout for current cycle\\r\\n     * @dev Can be called by anyone when conditions are met\\r\\n     */\\r\\n    function triggerPayout() external nonReentrant onlyActiveTanda {\\r\\n        // Check if payout time has arrived\\r\\n        uint256 nextPayoutTime = startTimestamp + payoutInterval;\\r\\n        require(block.timestamp >= nextPayoutTime, \\\"Payout time not reached\\\");\\r\\n\\r\\n        // Check all participants are paid up\\r\\n        require(_allParticipantsPaid(), \\\"Not all participants have paid\\\");\\r\\n        require(payoutOrderAssigned, \\\"Payout order not assigned\\\");\\r\\n\\r\\n        uint256 totalPayoutAmount = contributionAmount * participantCount;\\r\\n        require(\\r\\n            usdcToken.balanceOf(address(this)) >= totalPayoutAmount,\\r\\n            \\\"Insufficient contract balance\\\"\\r\\n        );\\r\\n\\r\\n        // Get fee settings from manager\\r\\n        (\\r\\n            uint16 creatorFee,\\r\\n            uint16 treasuryFee,\\r\\n            address treasuryWallet\\r\\n        ) = manager.getFeeSettings();\\r\\n        uint256 creatorAmount = (totalPayoutAmount * creatorFee) / 10000;\\r\\n        uint256 treasuryAmount = (totalPayoutAmount * treasuryFee) / 10000;\\r\\n        uint256 recipientAmount = totalPayoutAmount -\\r\\n            creatorAmount -\\r\\n            treasuryAmount;\\r\\n\\r\\n        startTimestamp = block.timestamp;\\r\\n\\r\\n        // Get current cycle recipient\\r\\n        address payable recipient = participants[payoutOrder[currentCycle - 1]]\\r\\n            .addr;\\r\\n\\r\\n        // Update state before transfer\\r\\n        currentCycle++;\\r\\n        totalFunds -= totalPayoutAmount;\\r\\n\\r\\n        // Distribute funds\\r\\n        if (creatorAmount > 0) {\\r\\n            usdcToken.safeTransfer(creator, creatorAmount);\\r\\n        }\\r\\n        if (treasuryAmount > 0) {\\r\\n            usdcToken.safeTransfer(treasuryWallet, treasuryAmount);\\r\\n        }\\r\\n        usdcToken.safeTransfer(recipient, recipientAmount);\\r\\n\\r\\n        emit PayoutSent(\\r\\n            recipient,\\r\\n            recipientAmount,\\r\\n            currentCycle - 1,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit FeesDistributed(creatorAmount, treasuryAmount, currentCycle - 1);\\r\\n\\r\\n        // Complete tanda if all cycles are done\\r\\n        if (currentCycle > participantCount) {\\r\\n            state = TandaState.COMPLETED;\\r\\n            emit TandaCompleted(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ==================== Creator Functions ====================\\r\\n\\r\\n    function removeParticipant(\\r\\n        address participant\\r\\n    ) external onlyCreator onlyActiveTanda {\\r\\n        uint256 participantIndex = addressToParticipantIndex[participant] - 1;\\r\\n        require(participantIndex < participants.length, \\\"Invalid participant\\\");\\r\\n\\r\\n        Participant storage p = participants[participantIndex];\\r\\n        require(p.isActive, \\\"Participant is already inactive\\\");\\r\\n        require(p.paidUntilCycle < currentCycle, \\\"Participant is paid up\\\");\\r\\n\\r\\n        // Mark participant as inactive\\r\\n        p.isActive = false;\\r\\n\\r\\n        // Adjust payout order if already assigned\\r\\n        if (payoutOrderAssigned) {\\r\\n            // Find the participant in payoutOrder and remove them\\r\\n            for (uint256 i = 0; i < payoutOrder.length; i++) {\\r\\n                if (payoutOrder[i] == participantIndex) {\\r\\n                    // Move all subsequent participants up\\r\\n                    for (uint256 j = i; j < payoutOrder.length - 1; j++) {\\r\\n                        payoutOrder[j] = payoutOrder[j + 1];\\r\\n                    }\\r\\n                    payoutOrder.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Update participant indices in payoutOrder\\r\\n            for (uint256 i = 0; i < payoutOrder.length; i++) {\\r\\n                if (payoutOrder[i] > participantIndex) {\\r\\n                    payoutOrder[i]--;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove from participants array\\r\\n        for (uint256 i = participantIndex; i < participants.length - 1; i++) {\\r\\n            participants[i] = participants[i + 1];\\r\\n            addressToParticipantIndex[participants[i].addr] = i + 1;\\r\\n        }\\r\\n        participants.pop();\\r\\n        delete addressToParticipantIndex[participant];\\r\\n\\r\\n        emit ParticipantRemoved(participant, currentCycle, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // ==================== Manager Functions ====================\\r\\n\\r\\n    function assignPayoutOrder(uint256 randomSeed) external onlyManager {\\r\\n        require(!payoutOrderAssigned, \\\"Payout order already assigned\\\");\\r\\n        require(\\r\\n            participants.length == participantCount,\\r\\n            \\\"Not all participants joined\\\"\\r\\n        );\\r\\n\\r\\n        payoutOrder = new uint256[](participantCount);\\r\\n\\r\\n        // Initialize with sequential order\\r\\n        for (uint256 i = 0; i < participantCount; i++) {\\r\\n            payoutOrder[i] = i;\\r\\n        }\\r\\n\\r\\n        // Fisher-Yates shuffle\\r\\n        for (uint256 i = participantCount - 1; i > 0; i--) {\\r\\n            uint256 j = uint256(keccak256(abi.encode(randomSeed, i))) % (i + 1);\\r\\n            (payoutOrder[i], payoutOrder[j]) = (payoutOrder[j], payoutOrder[i]);\\r\\n        }\\r\\n\\r\\n        // Update participant payoutOrder values\\r\\n        for (uint256 i = 0; i < participantCount; i++) {\\r\\n            participants[payoutOrder[i]].payoutOrder = i;\\r\\n        }\\r\\n\\r\\n        payoutOrderAssigned = true;\\r\\n        emit PayoutOrderAssigned(payoutOrder, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // ==================== Internal Functions ====================\\r\\n\\r\\n    function _startTanda() private {\\r\\n        state = TandaState.ACTIVE;\\r\\n        startTimestamp = block.timestamp;\\r\\n        currentCycle = 1;\\r\\n\\r\\n        emit TandaStarted(startTimestamp, currentCycle);\\r\\n        manager.requestRandomnessForTanda(tandaId);\\r\\n    }\\r\\n\\r\\n    function _allParticipantsPaid() internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            if (\\r\\n                participants[i].isActive &&\\r\\n                participants[i].paidUntilCycle < currentCycle\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ==================== View Functions ====================\\r\\n\\r\\n    /**\\r\\n     * @notice Check if address is a participant\\r\\n     * @param _address Address to check\\r\\n     * @return True if participant, false otherwise\\r\\n     */\\r\\n    function isParticipant(address _address) public view returns (bool) {\\r\\n        return addressToParticipantIndex[_address] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get participant details by address\\r\\n     * @param _address Participant address\\r\\n     * @return Participant struct\\r\\n     */\\r\\n    function getParticipant(\\r\\n        address _address\\r\\n    ) external view returns (Participant memory) {\\r\\n        require(isParticipant(_address), \\\"Address is not participant\\\");\\r\\n        return participants[addressToParticipantIndex[_address] - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all participants\\r\\n     * @return Array of Participant structs\\r\\n     */\\r\\n    function getAllParticipants() external view returns (Participant[] memory) {\\r\\n        return participants;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get current cycle payout recipient\\r\\n     * @return payoutAddress Address to receive next payout\\r\\n     */\\r\\n    function getCurrentPayoutRecipient() external view returns (address) {\\r\\n        require(payoutOrderAssigned, \\\"Payout order not assigned\\\");\\r\\n        require(state == TandaState.ACTIVE, \\\"Tanda not active\\\");\\r\\n        require(currentCycle <= participantCount, \\\"All cycles completed\\\");\\r\\n\\r\\n        return participants[payoutOrder[currentCycle - 1]].addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Tanda summary information\\r\\n     * @return currentState Current Tanda state\\r\\n     * @return cycle Current cycle number\\r\\n     * @return participantsCount Number of participants\\r\\n     * @return funds Total USDC in contract\\r\\n     * @return nextPayout Timestamp of next payout\\r\\n     */\\r\\n    function getTandaSummary()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            TandaState currentState,\\r\\n            uint256 cycle,\\r\\n            uint256 participantsCount,\\r\\n            uint256 funds,\\r\\n            uint256 nextPayout\\r\\n        )\\r\\n    {\\r\\n        currentState = state;\\r\\n        cycle = currentCycle;\\r\\n        participantsCount = participants.length;\\r\\n        funds = totalFunds;\\r\\n        nextPayout = state == TandaState.ACTIVE\\r\\n            ? startTimestamp + payoutInterval\\r\\n            : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if participant is in good standing\\r\\n     * @param _address Participant address\\r\\n     * @return True if paid up, false otherwise\\r\\n     */\\r\\n    function isParticipantInGoodStanding(\\r\\n        address _address\\r\\n    ) external view returns (bool) {\\r\\n        if (!isParticipant(_address)) return false;\\r\\n        Participant memory p = participants[\\r\\n            addressToParticipantIndex[_address] - 1\\r\\n        ];\\r\\n        return p.isActive && p.hasPaid && p.paidUntilCycle >= currentCycle;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcb6b04e8e04ecdf4d69205e85e1efca87c75eb8d7ab666a878ffef8b3ec9224a\",\"license\":\"MIT\"},\"contracts/TandaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Tanda.sol\\\";\\r\\n\\r\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\r\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\r\\n\\r\\ncontract TandaManager is VRFConsumerBaseV2Plus {\\r\\n    uint256 private subscriptionId;\\r\\n    bytes32 private gasLane;\\r\\n    uint32 private callbackGasLimit;\\r\\n    uint16 private requestConfirmations = 3;\\r\\n    uint32 private numWords = 1;\\r\\n    bool private nativePayment = true;\\r\\n\\r\\n    address public immutable usdcAddress;\\r\\n    uint256 public nextTandaId;\\r\\n    uint16 public maxParticipants = 30;\\r\\n    uint16 public creatorFee = 200;\\r\\n    uint16 public treasuryFee = 300;\\r\\n    address public treasuryWallet;\\r\\n\\r\\n    mapping(uint256 => address) public tandaIdToAddress;\\r\\n    mapping(uint256 => uint256) public vrfRequestIdToTandaId;\\r\\n    mapping(uint256 => bool) public activeTandas;\\r\\n\\r\\n    event TandaCreated(\\r\\n        uint256 indexed tandaId,\\r\\n        address indexed tandaAddress,\\r\\n        uint256 contributionAmount,\\r\\n        uint256 payoutInterval,\\r\\n        uint16 participantCount,\\r\\n        address creator\\r\\n    );\\r\\n    event RandomnessRequested(\\r\\n        uint256 indexed tandaId,\\r\\n        uint256 indexed requestId\\r\\n    );\\r\\n    event PayoutOrderAssigned(uint256 indexed tandaId);\\r\\n    event VRFConfigUpdated(\\r\\n        uint256 newSubscriptionId,\\r\\n        bytes32 newGasLane,\\r\\n        uint32 newCallbackGasLimit,\\r\\n        uint16 newRequestConfirmations,\\r\\n        uint32 newNumWords,\\r\\n        bool newNativePayment\\r\\n    );\\r\\n    event FeeSettingsUpdated(\\r\\n        uint16 creatorFee,\\r\\n        uint16 treasuryFee,\\r\\n        address treasuryWallet\\r\\n    );\\r\\n    event MaxParticipantsUpdated(uint16 newMaxParticipants);\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        uint256 _subscriptionId,\\r\\n        bytes32 _gasLane,\\r\\n        uint32 _callbackGasLimit,\\r\\n        address _usdcAddress,\\r\\n        address _treasuryWallet\\r\\n    ) VRFConsumerBaseV2Plus(_vrfCoordinator) {\\r\\n        require(_vrfCoordinator != address(0), \\\"Invalid VRF coordinator\\\");\\r\\n        require(_usdcAddress != address(0), \\\"Invalid USDC address\\\");\\r\\n        require(_treasuryWallet != address(0), \\\"Invalid treasury wallet\\\");\\r\\n\\r\\n        subscriptionId = _subscriptionId;\\r\\n        gasLane = _gasLane;\\r\\n        callbackGasLimit = _callbackGasLimit;\\r\\n        usdcAddress = _usdcAddress;\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update VRF configuration parameters\\r\\n     */\\r\\n    function updateVRFConfig(\\r\\n        uint256 _subscriptionId,\\r\\n        bytes32 _gasLane,\\r\\n        uint32 _callbackGasLimit,\\r\\n        uint16 _requestConfirmations,\\r\\n        uint32 _numWords,\\r\\n        bool _nativePayment\\r\\n    ) external onlyOwner {\\r\\n        subscriptionId = _subscriptionId;\\r\\n        gasLane = _gasLane;\\r\\n        callbackGasLimit = _callbackGasLimit;\\r\\n        requestConfirmations = _requestConfirmations;\\r\\n        numWords = _numWords;\\r\\n        nativePayment = _nativePayment;\\r\\n\\r\\n        emit VRFConfigUpdated(\\r\\n            _subscriptionId,\\r\\n            _gasLane,\\r\\n            _callbackGasLimit,\\r\\n            _requestConfirmations,\\r\\n            _numWords,\\r\\n            _nativePayment\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update fee settings\\r\\n     * @param _creatorFee New creator fee in basis points (max 400 = 4%)\\r\\n     * @param _treasuryFee New treasury fee in basis points (max 400 = 4%)\\r\\n     * @param _treasuryWallet New treasury wallet address\\r\\n     */\\r\\n    function updateFeeSettings(\\r\\n        uint16 _creatorFee,\\r\\n        uint16 _treasuryFee,\\r\\n        address _treasuryWallet\\r\\n    ) external onlyOwner {\\r\\n        require(_creatorFee <= 400, \\\"Creator fee cannot exceed 4%\\\");\\r\\n        require(_treasuryFee <= 400, \\\"Treasury fee cannot exceed 4%\\\");\\r\\n        require(_treasuryWallet != address(0), \\\"Invalid treasury wallet\\\");\\r\\n        require(\\r\\n            _creatorFee + _treasuryFee <= 500,\\r\\n            \\\"Total fees cannot exceed 4%\\\"\\r\\n        );\\r\\n\\r\\n        creatorFee = _creatorFee;\\r\\n        treasuryFee = _treasuryFee;\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n\\r\\n        emit FeeSettingsUpdated(_creatorFee, _treasuryFee, _treasuryWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update maximum number of participants per tanda\\r\\n     * @param _maxParticipants New maximum participants (must be >= 2)\\r\\n     */\\r\\n    function updateMaxParticipants(uint16 _maxParticipants) external onlyOwner {\\r\\n        require(_maxParticipants >= 2, \\\"Minimum 2 participants\\\");\\r\\n        maxParticipants = _maxParticipants;\\r\\n        emit MaxParticipantsUpdated(_maxParticipants);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new Tanda\\r\\n     * @param _contributionAmount USDC amount each participant must contribute\\r\\n     * @param _payoutInterval Time between payouts in seconds\\r\\n     * @param _participantCount Number of participants needed\\r\\n     * @param _whitelist Array of whitelisted participant addresses\\r\\n     * @return tandaId ID of the newly created Tanda\\r\\n     */\\r\\n    function createTanda(\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _payoutInterval,\\r\\n        uint16 _participantCount,\\r\\n        address[] calldata _whitelist\\r\\n    ) external returns (uint256) {\\r\\n        require(\\r\\n            _contributionAmount >= 10 * 10 ** 6,\\r\\n            \\\"Minimum contribution 10 USDC\\\"\\r\\n        );\\r\\n        // require(_payoutInterval >= 1 days, \\\"Minimum interval 1 day\\\");\\r\\n        require(_payoutInterval <= 30 days, \\\"Maximum interval 30 days\\\");\\r\\n        require(_participantCount >= 2, \\\"Minimum 2 participants\\\");\\r\\n        require(\\r\\n            _participantCount <= maxParticipants,\\r\\n            \\\"Exceeds max participants\\\"\\r\\n        );\\r\\n        require(\\r\\n            _whitelist.length == _participantCount,\\r\\n            \\\"Whitelist length mismatch\\\"\\r\\n        );\\r\\n\\r\\n        uint256 tandaId = nextTandaId++;\\r\\n        Tanda tanda = new Tanda(\\r\\n            tandaId,\\r\\n            _contributionAmount,\\r\\n            _payoutInterval,\\r\\n            _participantCount,\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _whitelist\\r\\n        );\\r\\n\\r\\n        tandaIdToAddress[tandaId] = address(tanda);\\r\\n        activeTandas[tandaId] = true;\\r\\n\\r\\n        emit TandaCreated(\\r\\n            tandaId,\\r\\n            address(tanda),\\r\\n            _contributionAmount,\\r\\n            _payoutInterval,\\r\\n            _participantCount,\\r\\n            msg.sender\\r\\n        );\\r\\n        return tandaId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request randomness for payout order assignment\\r\\n     * @dev Only callable by Tanda contracts\\r\\n     */\\r\\n    function requestRandomnessForTanda(uint256 tandaId) external {\\r\\n        require(tandaIdToAddress[tandaId] == msg.sender, \\\"Caller is not Tanda\\\");\\r\\n        require(activeTandas[tandaId], \\\"Tanda is not active\\\");\\r\\n\\r\\n        uint256 requestId = s_vrfCoordinator.requestRandomWords(\\r\\n            VRFV2PlusClient.RandomWordsRequest({\\r\\n                keyHash: gasLane,\\r\\n                subId: subscriptionId,\\r\\n                requestConfirmations: requestConfirmations,\\r\\n                callbackGasLimit: callbackGasLimit,\\r\\n                numWords: numWords,\\r\\n                extraArgs: VRFV2PlusClient._argsToBytes(\\r\\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: nativePayment})\\r\\n                )\\r\\n            })\\r\\n        );\\r\\n\\r\\n        vrfRequestIdToTandaId[requestId] = tandaId;\\r\\n\\r\\n        emit RandomnessRequested(tandaId, requestId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] calldata randomWords\\r\\n    ) internal override {\\r\\n        uint256 tandaId = vrfRequestIdToTandaId[requestId];\\r\\n        require(tandaIdToAddress[tandaId] != address(0), \\\"Invalid Tanda ID\\\");\\r\\n\\r\\n        Tanda tanda = Tanda(tandaIdToAddress[tandaId]);\\r\\n        tanda.assignPayoutOrder(randomWords[0]);\\r\\n\\r\\n        emit PayoutOrderAssigned(tandaId);\\r\\n    }\\r\\n\\r\\n    // ==================== View Functions ====================\\r\\n\\r\\n    function getUsdcAddress() external view returns (address) {\\r\\n        return usdcAddress;\\r\\n    }\\r\\n\\r\\n    function isTandaActive(uint256 tandaId) external view returns (bool) {\\r\\n        return activeTandas[tandaId];\\r\\n    }\\r\\n\\r\\n    function getTandaAddress(uint256 tandaId) external view returns (address) {\\r\\n        return tandaIdToAddress[tandaId];\\r\\n    }\\r\\n\\r\\n    function getActiveTandaIds() external view returns (uint256[] memory) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < nextTandaId; i++) {\\r\\n            if (activeTandas[i]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory activeIds = new uint256[](count);\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < nextTandaId; i++) {\\r\\n            if (activeTandas[i]) {\\r\\n                activeIds[index] = i;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        return activeIds;\\r\\n    }\\r\\n\\r\\n    function getFeeSettings() external view returns (uint16, uint16, address) {\\r\\n        return (creatorFee, treasuryFee, treasuryWallet);\\r\\n    }\\r\\n\\r\\n    function getMaxParticipants() external view returns (uint16) {\\r\\n        return maxParticipants;\\r\\n    }\\r\\n\\r\\n    function getVRFConfig()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, bytes32, uint32, uint16, uint32, bool)\\r\\n    {\\r\\n        return (\\r\\n            subscriptionId,\\r\\n            gasLane,\\r\\n            callbackGasLimit,\\r\\n            requestConfirmations,\\r\\n            numWords,\\r\\n            nativePayment\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0affc6682bf777bd1f631a4aba86b74b23ef0c81d378514dce30a0ecf26b5f7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createTanda(uint256,uint256,uint16,address[])": {
        "params": {
          "_contributionAmount": "USDC amount each participant must contribute",
          "_participantCount": "Number of participants needed",
          "_payoutInterval": "Time between payouts in seconds",
          "_whitelist": "Array of whitelisted participant addresses"
        },
        "returns": {
          "_0": "tandaId ID of the newly created Tanda"
        }
      },
      "requestRandomnessForTanda(uint256)": {
        "details": "Only callable by Tanda contracts"
      },
      "updateFeeSettings(uint16,uint16,address)": {
        "params": {
          "_creatorFee": "New creator fee in basis points (max 400 = 4%)",
          "_treasuryFee": "New treasury fee in basis points (max 400 = 4%)",
          "_treasuryWallet": "New treasury wallet address"
        }
      },
      "updateMaxParticipants(uint16)": {
        "params": {
          "_maxParticipants": "New maximum participants (must be >= 2)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "createTanda(uint256,uint256,uint16,address[])": {
        "notice": "Create a new Tanda"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestRandomnessForTanda(uint256)": {
        "notice": "Request randomness for payout order assignment"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      },
      "updateFeeSettings(uint16,uint16,address)": {
        "notice": "Update fee settings"
      },
      "updateMaxParticipants(uint16)": {
        "notice": "Update maximum number of participants per tanda"
      },
      "updateVRFConfig(uint256,bytes32,uint32,uint16,uint32,bool)": {
        "notice": "Update VRF configuration parameters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)380"
      },
      {
        "astId": 2528,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2530,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "gasLane",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 2532,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 2535,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 2538,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "numWords",
        "offset": 6,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 2541,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "nativePayment",
        "offset": 10,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2545,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "nextTandaId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2548,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "maxParticipants",
        "offset": 0,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 2551,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "creatorFee",
        "offset": 2,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 2554,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "treasuryFee",
        "offset": 4,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 2556,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "treasuryWallet",
        "offset": 6,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2560,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "tandaIdToAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2564,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "vrfRequestIdToTandaId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2568,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "activeTandas",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVRFCoordinatorV2Plus)380": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}